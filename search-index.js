var searchIndex = JSON.parse('{\
"rust_gpu_builder":{"doc":"","t":[13,13,4,3,5,5,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,5,12,12,12,12,12,12,12,12,12,11,11,12,12,11,11,11,11,11,11,11,12,11,11,12],"n":["Build","Change","Msg","ShaderBuilder","async_watch","async_watcher","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","build_shader","capability","clone","clone_into","command","command_for_update","deny_warnings","fmt","from","from","from_arg_matches","from_arg_matches_mut","group_id","into","into","main","multimodule","path_to_crate","preserve_bindings","relax_block_layout","relax_logical_pointer","relax_struct_store","release","scalar_block_layout","skip_block_layout","spirv_capability","spirv_metadata","spirv_metadata","target","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","uniform_buffer_standard_layout","update_from_arg_matches","update_from_arg_matches_mut","watch_paths"],"q":["rust_gpu_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Clap application struct.","Watch a file or directory, sending relevant events through …","Instantiate an async watcher and return it alongside a …","","","","","","","Builds a shader with the provided set of options.","Enables the provided SPIR-V capability.","","","","","Treat warnings as errors during compilation.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Compile one .spv file per entry point.","Shader crate to compile.","Preserve unused descriptor bindings. Useful for reflection.","Enable VK_KHR_relaxed_block_layout when checking standard …","Allow allocating an object of a pointer type and returning …","Allow store from one struct type to a different type with …","Compile shaders in release mode.","Enable VK_EXT_scalar_block_layout when checking standard …","Skip checking standard uniform / storage buffer layout. …","Clap value parser for <code>Capability</code>.","Clap value parser for <code>SpirvMetadata</code>.","Set the level of metadata included in the SPIR-V binary.","rust-gpu compile target.","","","","","","","","Enable VK_KHR_uniform_buffer_standard_layout when checking …","","","If set, will watch the provided directory and recompile on …"],"i":[3,3,0,0,0,0,10,10,3,10,3,10,10,10,10,10,10,10,10,10,3,10,10,10,10,3,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,3,10,3,10,3,10,10,10,10,10],"f":[0,0,0,0,[[[2,[1]],[4,[3]]],[[7,[[6,[5]]]]]],[[],8],[9,9],[9,9],[[]],[[]],[[]],[[]],[10,[[7,[11,12]]]],0,[10,10],[[]],[[],9],[[],9],0,[[10,13],14],[[]],[[]],[15,[[7,[10,16]]]],[15,[[7,[10,16]]]],[[],[[18,[17]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[19,[[7,[20,16]]]],[19,[[7,[21,16]]]],0,0,[[]],[[],7],[[],7],[[],7],[[],7],[[],22],[[],22],0,[[10,15],[[7,[16]]]],[[10,15],[[7,[16]]]],0],"p":[[3,"Path"],[8,"AsRef"],[4,"Msg"],[3,"Sender"],[8,"Error"],[3,"Box"],[4,"Result"],[6,"Result"],[3,"Command"],[3,"ShaderBuilder"],[3,"CompileResult"],[4,"SpirvBuilderError"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[3,"Id"],[4,"Option"],[15,"str"],[4,"Capability"],[4,"SpirvMetadata"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
