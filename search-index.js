var searchIndex = JSON.parse('{\
"rust_gpu_builder":{"doc":"","t":[3,5,5,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,5,12,12,12,12,12,12,12,12,12,5,5,12,12,11,11,11,11,12,11,11,12],"n":["ShaderBuilder","async_watch","async_watcher","augment_args","augment_args_for_update","borrow","borrow_mut","build_shader","capability","clone","clone_into","command","command_for_update","deny_warnings","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","main","multimodule","path_to_crate","preserve_bindings","relax_block_layout","relax_logical_pointer","relax_struct_store","release","scalar_block_layout","skip_block_layout","spirv_capability","spirv_metadata","spirv_metadata","target","to_owned","try_from","try_into","type_id","uniform_buffer_standard_layout","update_from_arg_matches","update_from_arg_matches_mut","watch_paths"],"q":["rust_gpu_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Clap application struct.","Watch a file or directory, sending relevant events through …","Instantiate an async watcher and return it alongside a …","","","","","Builds a shader with the provided set of options.","Enables the provided SPIR-V capability.","","","","","Treat warnings as errors during compilation.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","Compile one .spv file per entry point.","Shader crate to compile.","Preserve unused descriptor bindings. Useful for reflection.","Enable VK_KHR_relaxed_block_layout when checking standard …","Allow allocating an object of a pointer type and returning …","Allow store from one struct type to a different type with …","Compile shaders in release mode.","Enable VK_EXT_scalar_block_layout when checking standard …","Skip checking standard uniform / storage buffer layout. …","","Clap value parser for <code>SpirvMetadata</code>.","Set the level of metadata included in the SPIR-V binary.","rust-gpu compile target.","","","","","Enable VK_KHR_uniform_buffer_standard_layout when checking …","","","If set, will watch the provided directory and recompile on …"],"i":[0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,9,0,0,9,9,9,9,9,9,9,9,9,9],"f":[0,[[[2,[1]],3],[[6,[[5,[4]]]]]],[[],7],[8,8],[8,8],[[]],[[]],[9,[[6,[10,11]]]],0,[9,9],[[]],[[],8],[[],8],0,[[9,12],13],[[]],[14,[[6,[9,15]]]],[14,[[6,[9,15]]]],[[],[[17,[16]]]],[[]],[[]],0,0,0,0,0,0,0,0,0,[18,[[6,[19,15]]]],[18,[[6,[20,15]]]],0,0,[[]],[[],6],[[],6],[[],21],0,[[9,14],[[6,[15]]]],[[9,14],[[6,[15]]]],0],"p":[[3,"Path"],[8,"AsRef"],[3,"UnboundedSender"],[8,"Error"],[3,"Box"],[4,"Result"],[6,"Result"],[3,"Command"],[3,"ShaderBuilder"],[3,"CompileResult"],[4,"SpirvBuilderError"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[3,"Id"],[4,"Option"],[15,"str"],[4,"Capability"],[4,"SpirvMetadata"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
