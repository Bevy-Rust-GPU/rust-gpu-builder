var searchIndex = JSON.parse('{\
"rust_gpu_builder":{"doc":"","t":"WWNHHHHHHHHHHNNHHHHHHHHHHNEEDLLLLLLLLLFFLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLLFLLLLLLLLLLLLFMMMMMMMMMMMLLMMLLLLLLLLLLLLLLMLLLLLM","n":["","","Build","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","CALLSITE","Change","Json","META","META","META","META","META","META","META","META","META","META","Messagepack","Msg","OutputFormat","ShaderBuilder","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_bind_group_shader_type","as_bind_group_shader_type","as_bind_group_shader_type","async_watch","async_watcher","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_shader","capability","clone","clone","clone_into","clone_into","clone_type_data","clone_type_data","command","command_for_update","deny_warnings","downcast","downcast","downcast","fmt","fmt","from","from","from","from_arg_matches","from_arg_matches_mut","from_sample_","from_sample_","from_sample_","from_str","group_id","handle_compile_result","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","main","multimodule","output_format","output_path","path_to_crate","preserve_bindings","relax_block_layout","relax_logical_pointer","relax_struct_store","release","scalar_block_layout","skip_block_layout","spirv_capability","spirv_metadata","spirv_metadata","target","to_owned","to_owned","to_sample_","to_sample_","to_sample_","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uniform_buffer_standard_layout","upcast","upcast","upcast","update_from_arg_matches","update_from_arg_matches_mut","watch_paths"],"q":["rust_gpu_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clap application struct.","","","","","","","","","","Watch a file or directory, sending relevant events through …","Instantiate an async watcher and return it alongside a …","","","","","","","","","Builds a shader with the provided set of options.","Enables the provided SPIR-V capability.","","","","","","","","","Treat warnings as errors during compilation.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Compile one .spv file per entry point.","The format to write output in.","If set, combined SPIR-V and entrypoint metadata will be …","Shader crate to compile.","Preserve unused descriptor bindings. Useful for reflection.","Enable VK_KHR_relaxed_block_layout when checking standard …","Allow allocating an object of a pointer type and returning …","Allow store from one struct type to a different type with …","Compile shaders in release mode.","Enable VK_EXT_scalar_block_layout when checking standard …","Skip checking standard uniform / storage buffer layout. …","Clap value parser for <code>Capability</code>.","Clap value parser for <code>SpirvMetadata</code>.","Set the level of metadata included in the SPIR-V binary.","rust-gpu compile target.","","","","","","","","","","","","","","","Enable VK_KHR_uniform_buffer_standard_layout when checking …","","","","","","If set, will watch the provided directory and recompile on …"],"i":[0,0,5,0,0,0,0,0,0,0,0,0,0,5,15,0,0,0,0,0,0,0,0,0,0,15,0,0,0,5,15,12,5,15,12,5,15,12,0,0,12,12,5,15,12,5,15,12,12,12,15,12,15,12,15,12,12,12,12,5,15,12,15,12,5,15,12,12,12,5,15,12,15,12,0,5,15,12,5,15,12,5,15,12,5,15,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,15,12,5,15,12,5,15,12,5,15,12,5,15,12,12,5,15,12,12,12,12],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2],[2],[2],[[[4,[3]],[6,[5]]],[[9,[[8,[7]]]]]],[[],10],[11,11],[11,11],[[]],[[]],[[]],[[]],[[]],[[]],[12,[[9,[13,14]]]],0,[15,15],[12,12],[[]],[[]],[[],[[8,[16,17]]]],[[],[[8,[16,17]]]],[[],11],[[],11],0,[[]],[[]],[[]],[[15,18],19],[[12,18],19],[[]],[[]],[[]],[20,[[9,[12,21]]]],[20,[[9,[12,21]]]],[[]],[[]],[[]],[22,[[9,[15]]]],[[],[[24,[23]]]],[[13,[24,[25]],15]],[[]],[[]],[[]],[[[8,[17]]],[[8,[1,17]]]],[[[8,[17]]],[[8,[1,17]]]],[[[8,[17]]],[[8,[1,17]]]],[26,[[26,[1]]]],[26,[[26,[1]]]],[26,[[26,[1]]]],[27,[[27,[1]]]],[27,[[27,[1]]]],[27,[[27,[1]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,[22,[[9,[28,21]]]],[22,[[9,[29,21]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],30],[[],30],[[],30],0,[[],24],[[],24],[[],24],[[12,20],[[9,[21]]]],[[12,20],[[9,[21]]]],0],"p":[[8,"Any"],[3,"RenderAssets"],[3,"Path"],[8,"AsRef"],[4,"Msg"],[3,"Sender"],[8,"Error"],[3,"Box"],[4,"Result"],[6,"Result"],[3,"Command"],[3,"ShaderBuilder"],[3,"CompileResult"],[4,"SpirvBuilderError"],[4,"OutputFormat"],[8,"TypeData"],[3,"Global"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[15,"str"],[3,"Id"],[4,"Option"],[3,"PathBuf"],[3,"Arc"],[3,"Rc"],[4,"Capability"],[4,"SpirvMetadata"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
